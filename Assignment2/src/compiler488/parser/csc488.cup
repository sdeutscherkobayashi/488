//
// Package and import specifications section.

package compiler488.parser;

import java_cup.runtime.*;		// Must always import this.

/* User code components 1: action code components.
 * Code to be used inside the actions triggered when productions are matched.
 * If any common code is needed for more than one action , put it here.
 */
// action code {:
// your code goes HERE
//:};

/* User code components 2: parser code components.
 * Modifications to the default generated parser
 */
parser code {:

	String lastError;

    /** Override the report_error method so it will display the line and
     * column of where the error occurred in the input as well as the
     * reason for the error which is passed into the method in the
     * String 'message'.
     * @param message  error message to print
     * @param info     symbol containing line/column numbers
     */
    public void report_error(String message, Object info)
	{
	String st =  "Error";

        if (info instanceof java_cup.runtime.Symbol)
	    {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

	    /* s.left is supposed to hold the line number of the error.
	     * s.right is supposed to hold the column number.
             * If either is < 0 the parser may have run off the end of the program
             * and a Syntax Error message without line number may be printed.
	     */

            if (s.left >= 0)				// Check line number.
		{
                st += " in line " + (s.left + 1);
                if (s.right >= 0)			// Check column number.
                    st += ", column " + (s.right + 1);
		}
            else
               st += " at end of input " ;
           }
	    st += ": " + message;
        System.err.println (st);
        lastError = st;
	}

    /** Override the report_fatal_error method to use the report_error method. */
    /** @throws SyntaxErrorException						*/
    public void report_fatal_error (String message, Object info) throws SyntaxErrorException
	{
        report_error (message, info);
/*        throw new SyntaxErrorException (lastError); */
	}

   /** version string for printing version in Main */
   public static final String version =
     " $Revision: 1.10 $ $Date: 2013/01/04 16:42:14 $Author: dw $" ;

:};

/* User code components 3: initialization code.
 * If you want some code to be executed before the parser asks for the first
 * token, add it here.
 */
init with {:
:};

/* User code components 4: scanner specification code.
 * If you need to override the way the parser asks the scanner for the
 * next token, put your preferred method here.  Uncomment the line following
 * this comment, replace the line after that with your code, and uncomment
 * the line after that.
 */
// scan with {:
// your code goes here
// :};

/* Symbol lists section.
 * The names of terminals and non-terminals are not allowed to be CUP
 * reserved words.  These include "code", "action", "parser", "terminal",
 * "non", "nonterminal", "init", "scan", "with", "start", "precedence",
 * "left", "right", "nonassoc", "import", and "package".
 */

// DEFINITIONS for CSC488S Source Language  Winter  2012/2013

// Terminals returned by the scanner with no value attached.
terminal 	BOOLEAN,	INTEGER,	BEGIN		;
terminal	ELSE,	END,	EXIT,   FI,	FORWARD	;
terminal	IF,	GET, 	LOOP,	POOL,	PROCEDURE,	PUT	;
terminal	RESULT,	RETURN,	SKIP,	THEN,	WHEN	;

// Special-character terminals, no value attached
terminal	AND,	OR,	NOT,	TRUE,	FALSE	;
terminal	L_PAREN	,R_PAREN,L_SQUARE, R_SQUARE 	;
terminal	EQUAL,	GREATER,LESS,	COMMA,  DOT, COLON	;
terminal	PLUS,	MINUS,	TIMES,  DIVIDE	;

// Terminals returned by the scanner with a value.
terminal String  IDENT	;
terminal Integer INTCONST	;
terminal String  TEXTCONST	;

// Non-terminals that have no value.
// nonterminal xxx

nonterminal	program, statementList, statement, scope, declarationList,
            declaration, functionHead, procedureHead, variablenames,
            bound, type, outputs, output, input, argumentList,
            arguments, parameterList, parameters, variable, expression,
            variablename, arrayname, functionname, procedurename,
            parametername;

// Non-terminals that have a value.
// nonterminal type  nameList ;

// CSC488S PLEASE NOTE: your grammar CAN NOT use the 'precedence'
// feature of java-cup. The lines below should remain
// commented.
//
//precedence left PLUS, MINUS;
//precedence left TIMES, DIVIDE;		// Higher precedence.

// The grammar section.

// This specifies the initial symbol of the grammar.
start with program;

/* Notice that sometimes the action must be inside the production rule,
 * not after it.  This is a subtle yet significant difference from YACC.
 * This is because the CUP parser is looking ahead one token.  It ALWAYS
 * reads one more token before it will act on the production.
 */

program		::=	;				// the main program

/*****************************************************************************

  YOUR CAREFULLY CRAFTED GRAMMAR FOR THE CSC488S SOURCE LANGUAGE

    GOES HERE

****************************************************************************/
program         ::= scope ;

statementList   ::= statementList statement |
                    statement;
statement       ::= IF expression THEN statement FI |
                    IF expression THEN statement ELSE statement FI |
                    LOOP statementList POOL |
                    EXIT | EXIT INTCONST |
                    EXIT WHEN expression |
                    EXIT INTCONST WHEN expression |
                    RESULT expression | RETURN |
                    PUT outputs | GET input |
                    procedurename L_PAREN argumentList R_PAREN |
                    scope ;

scope           ::= BEGIN declarationList statementList END |
                    BEGIN statementList END ;

declarationList ::= declarationList declaration |
                    declaration ;
declaration     ::= type variablenames |
                    functionHead scope |
                    procedureHead scope |
                    FORWARD functionHead |
                    FORWARD procedureHead ;

functionHead    ::= type functionname L_PAREN R_PAREN ;
procedureHead   ::= PROCEDURE procedurename L_PAREN R_PAREN ;

variablenames   ::= variablename |
                    variablename L_SQUARE INTCONST R_SQUARE |
                    variablename L_SQUARE bound DOT DOT bound R_SQUARE |
                    variablename COMMA variablenames ;
bound           ::= INTCONST | MINUS INTCONST ;
type            ::= INTEGER | BOOLEAN ;

outputs         ::= output |
                    output COMMA outputs;
output          ::= TEXTCONST | SKIP ;

input		       	::= variable |
                    variable COMMA input ;

argumentList	::= arguments | //EMPTY
					;
arguments		::= expression |
					expression COMMA arguments;
parameters		::= type parametername |
					parameters COMMA parameters;
parameterList	::= parameters | //EMPTY
					;
variable		::= variablename |
					arrayname L_SQUARE expression R_SQUARE;
expression		::= INTEGER |
					MINUS expression |
//					expression PLUS expression |
//					expression MINUS expression |
//					expression TIMES expression |
//					expression DIVIDE expression |
					TRUE |
					FALSE |
					NOT expression |
//					expression AND expression |
//					expression OR expression |
//					expression EQUAL expression |
//					expression NOT EQUAL expression |
//					expression LESS expression |
//					expression LESS EQUAL expression |
//					expression GREATER expression |
//					expression GREATER EQUAL expression |
//					L_PAREN expression R_PAREN |
//					variable |
//					functionname L_PAREN argumentList R_PAREN |
					parametername;
variablename	::= IDENT ;
functionname	::= IDENT ;
procedurename	::= IDENT ;
parametername	::= IDENT ;
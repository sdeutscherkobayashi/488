//  $Revision: 1.14 $ $Date: 2013/02/04 20:41:03 $ $Author: dw $
// Package and import specifications section.

package compiler488.parser;

import java_cup.runtime.*;		// Must always import this.
import compiler488.ast.decl.*;
import compiler488.ast.expn.*;
import compiler488.ast.stmt.*;
import compiler488.ast.type.*;
import compiler488.ast.*;

/* User code components 1: action code components.
 * Code to be used inside the actions triggered when productions are matched.
 * If any common code is needed for more than one action , put it here.
 */
// action code {:
// your code goes HERE
//:};

/* User code components 2: parser code components.
 * Modifications to the default generated parser
 */
parser code {:

	String lastError;

    /** Override the report_error method so it will display the line and
     * column of where the error occurred in the input as well as the
     * reason for the error which is passed into the method in the
     * String 'message'.
     * @param message  error message to print
     * @param info     symbol containing line/column numbers
     */
    public void report_error(String message, Object info)
	{
	String st =  "Error";

        if (info instanceof java_cup.runtime.Symbol)
	    {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

	    /* s.left is supposed to hold the line number of the error.
	     * s.right is supposed to hold the column number.
             * If either is < 0 the parser may have run off the end of the program
             * and a Syntax Error message without line number may be printed.
	     */

            if (s.left >= 0)				// Check line number.
		{
                st += " in line " + (s.left + 1);
                if (s.right >= 0)			// Check column number.
                    st += ", column " + (s.right + 1);
		}
            else
               st += " at end of input " ;
           }
	    st += ": " + message;
        System.err.println (st);
        lastError = st;
	}

    /** Override the report_fatal_error method to use the report_error method. */
    /** @throws SyntaxErrorException						*/
    public void report_fatal_error (String message, Object info) throws SyntaxErrorException
	{
        report_error (message, info);
        throw new SyntaxErrorException (lastError);
	}

   /** version string for printing version in Main */
   public static final String version =
     " $Revision: 1.14 $ $Date: 2013/02/04 20:41:03 $Author: dw $" ;

:};

/* User code components 3: initialization code.
 * If you want some code to be executed before the parser asks for the first
 * token, add it here.
 */
init with {:
:};

/* User code components 4: scanner specification code.
 * If you need to override the way the parser asks the scanner for the
 * next token, put your preferred method here.  Uncomment the line following
 * this comment, replace the line after that with your code, and uncomment
 * the line after that.
 */
// scan with {:
// your code goes here
// :};

/* Symbol lists section.
 * The names of terminals and non-terminals are not allowed to be CUP
 * reserved words.  These include "code", "action", "parser", "terminal",
 * "non", "nonterminal", "init", "scan", "with", "start", "precedence",
 * "left", "right", "nonassoc", "import", and "package".
 */

// DEFINITIONS for CSC488S Source Language  Winter  2012/2013

/**********************************************
 *                                            *
 *            TERMINAL DECLARATIONS           *
 *                                            *
 **********************************************/

// Terminals returned by the scanner with no value attached.
terminal 	BOOLEAN,	INTEGER,	BEGIN		;
terminal	ELSE,	END,	EXIT,   FI,	FORWARD	;
terminal	IF,	GET, 	LOOP,	POOL,	PROCEDURE,	PUT	;
terminal	RESULT,	RETURN,	SKIP,	THEN,	WHEN	;

// Special-character terminals, no value attached
terminal	AND,	OR,	NOT,	TRUE,	FALSE	;
terminal	L_PAREN	,R_PAREN,L_SQUARE, R_SQUARE 	;
terminal	EQUAL,	GREATER,LESS,	COMMA,  DOT, COLON	;
terminal	PLUS,	MINUS,	TIMES,  DIVIDE	;

// Terminals returned by the scanner with a value.
terminal String  IDENT	;
terminal Integer INTCONST	;
terminal String  TEXTCONST	;


/**********************************************
 *                                            *
 *            NON-TERMINAL DECLARATIONS       *
 *                                            *
 **********************************************/
// Non-terminals that have no value.
// nonterminal xxx

nonterminal Program	program ;
nonterminal Scope scope ;
nonterminal	Stmt statement ;
nonterminal ASTList<Stmt>	statements ;
nonterminal Declaration	declaration ;
nonterminal	ASTList<Declaration> declarations ;
nonterminal	compiler488.ast.type.Type type ;
nonterminal	Integer bound	;
nonterminal	ASTList<DeclarationPart> variablenames ;
nonterminal DeclarationPart	variablename ;
nonterminal RoutineDecl	functionHead,	procedureHead	;
nonterminal	ASTList<ScalarDecl> parameterList, parameters  ;
nonterminal ASTList<Expn> argumentList, arguments  ;
nonterminal ScalarDecl parameter  ;
nonterminal Expn argument  ;
nonterminal ASTList<Printable> outputs ;
nonterminal	ASTList<compiler488.ast.Readable> inputs ;
nonterminal Printable output ;
nonterminal compiler488.ast.Readable input ;
nonterminal Expn 	expression ;
nonterminal	Expn conjunction ;
nonterminal	Expn negation ,	compareExpn ;
nonterminal	Expn arithExpn,	term,    	factor		;
nonterminal	Expn primary,	constant ;
nonterminal ReadableExpn variable	;

// Non-terminals that have a value.
// nonterminal type  nameList ;

// CSC488S PLEASE NOTE: your grammar CAN NOT use the 'precedence'
// feature of java-cup. The lines below should remain
// commented.
//
//precedence left PLUS, MINUS;
//precedence left TIMES, DIVIDE;		// Higher precedence.


/**********************************************
 *                                            *
 *            GRAMMAR DEFINITION              *
 *                                            *
 **********************************************/

// The grammar section.
// This specifies the initial symbol of the grammar.
start with program;

/* Notice that sometimes the action must be inside the production rule,
 * not after it.  This is a subtle yet significant difference from YACC.
 * This is because the CUP parser is looking ahead one token.  It ALWAYS
 * reads one more token before it will act on the production.
 */

/**********************************************
 *            PROGRAM/SCOPES                  *
 **********************************************/
program		::=	scope:programScope					// the main program
      {:
        Program p = new Program();
        p.setStatements(programScope.getStatements());
        p.setDeclarations(programScope.getDeclarations());
        RESULT = p;
      :}
;


scope		::=	BEGIN declarations:decls statements:stmts END 	// scope with declarations and statements
      {:
        Scope s = new Scope();
        s.setDeclarations(decls);
        s.setStatements(stmts);
        RESULT = s;
      :}
		|	BEGIN statements:stmts  END 			// scope with statments only
      {:
        Scope s = new Scope();
        s.setStatements(stmts);
        RESULT = s;
      :}
		;

/**********************************************
 *            STATEMENTS                      *
 **********************************************/

statements	::=	statement:stmt						// sequence of statements
      {:
        //System.out.println("statements ::= statement");
        ASTList<Stmt> stmtList = new ASTList<Stmt>();
        stmtList.addLast(stmt);
        RESULT = stmtList;
      :}
		|	statements:stmts statement:stmt
      {:
        //System.out.println("statements ::= statements statement");
        stmts.addLast(stmt);
        RESULT = stmts;
      :}
		;

statement	::=	variable:var COLON EQUAL expression:expr				// assignment statement
      {:
        //System.out.println("statement ::= variable COLON EQUAL expression");
        AssignStmt assignmentStmt = new AssignStmt();
        assignmentStmt.setLval(var);
        assignmentStmt.setRval(expr);
        RESULT = assignmentStmt;
      :}

		|	IF expression:expr THEN statements:stmts FI 			// if statements
      {:
        //System.out.println("statement ::= IF expression THEN statements FI");
        IfStmt ifStmt = new IfStmt();
        ifStmt.setCondition(expr);
        ifStmt.setWhenTrue(stmts);
        RESULT = ifStmt;
      :}

		|	IF expression:expr THEN statements:ifStmts ELSE statements:elseStmts FI
      {:
        //System.out.println("statement ::= IF expression THEN statements ELSE statements FI");
        IfStmt ifStmt = new IfStmt();
        ifStmt.setCondition(expr);
        ifStmt.setWhenTrue(ifStmts);
        ifStmt.setWhenFalse(elseStmts);
        RESULT = ifStmt;
      :}

		|	LOOP statements:stmts POOL					// loop statement
      {:
        //System.out.println("statement ::= LOOP statements POOL");
        LoopStmt loopStmt = new LoopStmt();
        loopStmt.setBody(stmts);
        RESULT = loopStmt;
      :}

		|	EXIT							// exit statements
      {:
        //System.out.println("statement ::= EXIT");
        RESULT = new ExitStmt();
      :}

		|	EXIT INTCONST:level
      {:
        //System.out.println("statement ::= EXIT INTCONST");
        ExitStmt exitStmt = new ExitStmt();
        exitStmt.setLevel(level);
        RESULT = exitStmt;
      :}

		|	EXIT WHEN expression:expr
      {:
        //System.out.println("statement ::= EXIT WHEN expression");
        ExitStmt exitStmt = new ExitStmt();
        exitStmt.setExpn(expr);
        RESULT = exitStmt;
      :}

		|	EXIT INTCONST:level WHEN expression:expr
      {:
        //System.out.println("statement ::= EXIT INTCONST WHEN expression");
        ExitStmt exitStmt = new ExitStmt();
        exitStmt.setLevel(level);
        exitStmt.setExpn(expr);
        RESULT = exitStmt;
      :}

		|	RESULT expression:expr 					// return from function
      {:
        //System.out.println("statement ::= RESULT expression");
        ResultStmt resultStmt = new ResultStmt();
        resultStmt.setValue(expr);
        RESULT = resultStmt;
      :}

		|	RETURN 							// return from procedure
      {:
        //System.out.println("statement ::= RETURN");
        RESULT = new ReturnStmt();
      :}

		|	IDENT:procName L_PAREN  argumentList:argList  R_PAREN 			// call procedure
      {:
        //System.out.println("statement ::= IDENT (argumentList)");
        ProcedureCallStmt procStmt = new ProcedureCallStmt();
        procStmt.setName(procName);
        procStmt.setArguments(argList);
        RESULT = procStmt;
      :}

		|	PUT outputs:outputList					// input/output statments
      {:
        //System.out.println("statement ::= PUT outputs");
        PutStmt putStmt = new PutStmt();
        putStmt.setOutputs(outputList);
        RESULT = putStmt;
      :}

		|	GET  inputs:inputList
      {:
        //System.out.println("statement ::= GET inputs");
        GetStmt getStmt = new GetStmt();
        getStmt.setInputs(inputList);
        RESULT = getStmt;
      :}

		|	scope:s							// embedded scope
      {:
        //System.out.println("statement ::= scope");
        RESULT = s;
      :}
		;

/**********************************************
 *            DECLARATIONS                    *
 **********************************************/

declarations	::=	declaration:decl						// sequence of declarations
      {:
        //System.out.println("declarations ::= declaration");
        ASTList<Declaration> declList = new ASTList<Declaration>();
        declList.addLast(decl);
        RESULT = declList;
      :}
		|	declarations:declList declaration:decl
      {:
        //System.out.println("declarations ::= declarations declaration");
        declList.addLast(decl);
        RESULT = declList;
      :}
		;

declaration	::=	type:t variablenames:variableNameList 					// declare scalar/array variables
      {:
        //System.out.println("declaration ::= type variablenames");
        MultiDeclarations multiDecl = new MultiDeclarations();
        multiDecl.setType(t);
        multiDecl.setElements(variableNameList);
        RESULT = multiDecl;
      :}

		|	functionHead:funcHead  scope:s					// function declaration
      {:
        //System.out.println("declaration ::= functionHead scope");
        funcHead.getRoutineBody().setBody(s);
        RESULT = funcHead;
      :}

		|	procedureHead:procHead  scope:s					// procedure delcaration
      {:
        //System.out.println("declaration ::= procedureHead scope");
        procHead.getRoutineBody().setBody(s);
        RESULT = procHead;
      :}

		| FORWARD  functionHead:funcHead					// forward function declaration
      {:
        //System.out.println("declaration ::= FORWARD functionHead");
        RESULT = funcHead;
      :}

		|	FORWARD  procedureHead:procHead					// forward procedure declaration
      {:
        //System.out.println("declaration ::= FORWARD procedureHead");
        RESULT = procHead;
      :}
		;

/**********************************************
 *            VARIABLES                       *
 **********************************************/

variablenames	::=	variablename:varName  				// list of variables being declared
      {:
        //System.out.println("variablenames ::= variablename");
        ASTList<DeclarationPart> varList = new ASTList<DeclarationPart>();
        varList.addLast(varName);
        RESULT = varList;
      :}

		|	variablenames:varList COMMA variablename:varName
      {:
        //System.out.println("variablenames := varList, variablename");
        varList.addLast(varName);
        RESULT = varList;
      :}
		;

variablename	::=	IDENT:varName 						// scalar variable
      {:
        //System.out.println("variablename ::= IDENT");
        DeclarationPart var = new DeclarationPart();
        var.setName(varName);
        RESULT = var;
      :}

		|	IDENT:varName L_SQUARE INTCONST:size R_SQUARE		// array variable with upper bound
      {:
        //System.out.println("variablename ::= IDENT [ INTCONST ]");
        ArrayDeclPart var = new ArrayDeclPart();
        var.setName(varName);
        var.setSize(size);
        var.setLowerBoundary(0);
        var.setUpperBoundary(size - 1);
        RESULT = var;
      :}

		|	IDENT:varName L_SQUARE bound:lower DOT DOT bound:upper  R_SQUARE	// array variable with upper/lower bounds
      {:
        //System.out.println("variablename ::= IDENT [ bound .. bound ]");
        ArrayDeclPart var = new ArrayDeclPart();
        var.setName(varName);
        var.setSize(upper - lower + 1);
        var.setLowerBoundary(lower);
        var.setUpperBoundary(upper);
        RESULT = var;
      :}
		;

/**********************************************
 *            BOUND                           *
 **********************************************/

bound		::=	INTCONST:i					// positive array bound
      {:
        //System.out.println("bound ::= INTCONST");
        RESULT = i;
      :}

		|	MINUS INTCONST:i					// negative array bound
      {:
        //System.out.println("bound ::= MINUS INTCONST");
        RESULT = -i;
      :}
		;

/**********************************************
 *            TYPE                            *
 **********************************************/

type		::=	INTEGER			// integer type
      {:
        //System.out.println("type ::= INTEGER");
        RESULT = new IntegerType();
      :}

		|	BOOLEAN			// boolean type
      {:
        //System.out.println("type ::= BOOLAN");
        RESULT = new BooleanType();
      :}
		;

/**********************************************
 *            ROUTINE HEADERS                 *
 **********************************************/

functionHead	::=	type:t  IDENT:name L_PAREN parameterList:paramList R_PAREN		// function head
      {:
        //System.out.println("functionHead ::= type IDENT (paramList)");
        RoutineDecl routineDecl = new RoutineDecl();
        routineDecl.setName(name);
        routineDecl.setType(t);
        RoutineBody routineBody = new RoutineBody();
        routineBody.setParameters(paramList);
        routineDecl.setRoutineBody(routineBody);
        RESULT = routineDecl;
      :}
		;

procedureHead	::=	PROCEDURE  IDENT:name L_PAREN parameterList:paramList  R_PAREN		// procedure head
      {:
        //System.out.println(" procedureHead ::= PROCEDURE IDENT (paramList)");
        RoutineDecl routineDecl = new RoutineDecl();
        routineDecl.setName(name);
        RoutineBody routineBody = new RoutineBody();
        routineBody.setParameters(paramList);
        routineDecl.setRoutineBody(routineBody);
        RESULT = routineDecl;
      :}
		;

/**********************************************
 *            I/O                             *
 **********************************************/
outputs		::=	output:printable			// list of output expressions
      {:
        //System.out.println("outputs ::= output");
        ASTList<Printable> outputList = new ASTList<Printable>();
        outputList.addLast(printable);
        RESULT = outputList;
      :}

		|	outputs:outputList COMMA output:printable
      {:
        //System.out.println("outputs ::= outputs , output");
        outputList.addLast(printable);
        RESULT = outputList;
      :}
		;

output		::=	expression:expr		// integer expression
      {:
        //System.out.println("output ::= expression");
        RESULT = expr;
      :}

		|	TEXTCONST:txt		// text constant
      {:
        //System.out.println("output ::= TEXTCONST");
        TextConstExpn txtConst = new TextConstExpn();
        txtConst.setValue(txt);
        RESULT = txtConst;
      :}

		|	SKIP			// skip constant
      {:
        //System.out.println("output ::= SKIP");
        RESULT = new SkipConstExpn();
      :}
		;

inputs		::= variable:var    // list of variables being read into
      {:
        //System.out.println("inputs ::= expression");
        ASTList<compiler488.ast.Readable> inputList = new ASTList<compiler488.ast.Readable>();
        inputList.addLast(var);
        RESULT = inputList;
      :}

    | inputs:inputList COMMA variable:var
      {:
        //System.out.println("inputs ::= expression");
        inputList.addLast(var);
        RESULT = inputList;
      :}
    ;

/**********************************************
 *            ARGUMENTS/PARAMS                *
 **********************************************/

argumentList    ::= arguments:args            //  function/procedure arguments
      {:
        //System.out.println("argumentList ::= expression");
        RESULT = args;
      :}

    |    //  EMPTY
    ;

arguments    ::=    expression:argExpr        // list of function/procedure arguments
      {:
        //System.out.println("arguments ::= expression");
        ASTList<Expn> args = new ASTList<Expn>(argExpr);
        RESULT = args;
      :}

    |    arguments:args COMMA expression:argExpr
      {:
        //System.out.println("arguments ::= expression");
          args.addLast(argExpr);
          RESULT = args;
      :}
    ;

parameterList    ::=    parameters:paramList            //  function/procedure formal parameters
      {:
        //System.out.println("parameterList ::= expression");
        RESULT = paramList;
      :}

    |    //  EMPTY
    ;

parameters    ::=    parameter:param            // list of function/procedure formal parameters
      {:
        //System.out.println("parameters ::= expression");
        ASTList<ScalarDecl> params = new ASTList<ScalarDecl>();
        params.addLast(param);
        RESULT = params;
      :}

    |    parameters:params COMMA parameter:param
      {:
        //System.out.println("parameters ::= expression");
        params.addLast(param);
        RESULT = params;
      :}
    ;

parameter    ::=    type:paramType IDENT:paramName        // declare one parameter
      {:
        //System.out.println("parameter ::= expression");
        ScalarDecl param = new ScalarDecl();
        param.setName(paramName);
        param.setType(paramType);
        RESULT = param;
      :}
   ;

/**********************************************
 *            EXPRESSIONS                     *
 **********************************************/

expression	::=	conjunction:conj			// disjunctions, associate left-to-right
      {:
        //System.out.println("expression ::= conjunction");
        RESULT = conj;
      :}

		|	expression:leftExpr OR conjunction:rightExpr
      {:
        //System.out.println("expression ::= expression OR conjunction");
        BoolExpn boolExpn = new BoolExpn();
        boolExpn.setLeft(leftExpr);
        boolExpn.setRight(rightExpr);
        boolExpn.setOpSymbol("OR");
        RESULT = boolExpn;
      :}
		;

conjunction	::=	negation:neg			// conjunctions, associate left-to-right
      {:
        //System.out.println("conjunction ::= negation");
        RESULT = neg;
      :}

		|	conjunction:leftExpr AND negation:rightExpr
      {:
        //System.out.println("conjunction ::= conjunction AND negation");
        BoolExpn boolExpn = new BoolExpn();
        boolExpn.setLeft(leftExpr);
        boolExpn.setRight(rightExpr);
        boolExpn.setOpSymbol("AND");
        RESULT = boolExpn;
      :}
		;

negation	::=	compareExpn:comp 			// negations
      {:
        //System.out.println("negation ::= compareExpn");
        RESULT = comp;
      :}

		|	NOT negation:neg
      {:
        //System.out.println("negation ::= NOT negation");
        NotExpn notExpn = new NotExpn();
        notExpn.setOperand(neg);
        notExpn.setOpSymbol("NOT");
        RESULT = notExpn;
      :}
		;

compareExpn	::=	arithExpn:arith			// aritharisons, do not associate
      {:
        //System.out.println("compareExpn ::= arithExpn");
        RESULT = arith;
      :}

		|	arithExpn:leftExpr EQUAL arithExpn:rightExpr
      {:
        //System.out.println("compareExpn ::= arithExpn EQUAL arithExpn");
        EqualsExpn equalsExpn = new EqualsExpn();
        equalsExpn.setLeft(leftExpr);
        equalsExpn.setRight(rightExpr);
        equalsExpn.setOpSymbol("EQUAL");
        RESULT = equalsExpn;
      :}

		| 	arithExpn:leftExpr NOT EQUAL arithExpn:rightExpr
      {:
        //System.out.println("compareExpn ::= arithExpn NOT EQUAL arithExpn");
        EqualsExpn equalsExpn = new EqualsExpn();
        equalsExpn.setLeft(leftExpr);
        equalsExpn.setRight(rightExpr);
        equalsExpn.setOpSymbol("NOT EQUAL");
        RESULT = equalsExpn;
      :}

		|	arithExpn:leftExpr LESS arithExpn:rightExpr
      {:
        //System.out.println("compareExpn ::= arithExpn LESS arithExpn");
        CompareExpn compExpn = new CompareExpn();
        compExpn.setLeft(leftExpr);
        compExpn.setRight(rightExpr);
        compExpn.setOpSymbol("LESS");
        RESULT = compExpn;
      :}

		|	arithExpn:leftExpr LESS EQUAL arithExpn:rightExpr
      {:
        //System.out.println("compareExpn ::= arithExpn LESS EQUAL arithExpn");
        CompareExpn compExpn = new CompareExpn();
        compExpn.setLeft(leftExpr);
        compExpn.setRight(rightExpr);
        compExpn.setOpSymbol("LESS EQUAL");
        RESULT = compExpn;
      :}

		|	arithExpn:leftExpr GREATER arithExpn:rightExpr
      {:
        //System.out.println("compareExpn ::= arithExpn GREATER arithExpn");
        CompareExpn compExpn = new CompareExpn();
        compExpn.setLeft(leftExpr);
        compExpn.setRight(rightExpr);
        compExpn.setOpSymbol("GREATER");
        RESULT = compExpn;
      :}

		|	arithExpn:leftExpr GREATER EQUAL arithExpn:rightExpr
      {:
        //System.out.println("compareExpn ::= arithExpn GREATER EQUAL arithExpn");
        CompareExpn compExpn = new CompareExpn();
        compExpn.setLeft(leftExpr);
        compExpn.setRight(rightExpr);
        compExpn.setOpSymbol("GREATER EQUAL");
        RESULT = compExpn;
      :}
		;

arithExpn	::=	term:trm				// expressions, associate + , - left-to-right
      {:
        //System.out.println("arithExpn ::= term");
        RESULT = trm;
      :}

		|	arithExpn:leftExpr  PLUS  term:rightExpr
      {:
        //System.out.println("arithExpn ::= arithExpn PLUS term");
        ArithExpn arithExpn = new ArithExpn();
        arithExpn.setLeft(leftExpr);
        arithExpn.setRight(rightExpr);
        arithExpn.setOpSymbol("PLUS");
        RESULT = arithExpn;
      :}

		|	arithExpn:leftExpr  MINUS term:rightExpr
      {:
        //System.out.println("arithExpn ::= arithExpn MINUS term");
        ArithExpn arithExpn = new ArithExpn();
        arithExpn.setLeft(leftExpr);
        arithExpn.setRight(rightExpr);
        arithExpn.setOpSymbol("MINUS");
        RESULT = arithExpn;
      :}
		;

term		::=	factor:fact				// terms, associate * , /   left-to-right
      {:
        //System.out.println("term ::= factor");
        RESULT = fact;
      :}

		|	term:leftExpr TIMES factor:rightExpr
      {:
        //System.out.println("term ::= term TIMES factor");
        ArithExpn arithExpn = new ArithExpn();
        arithExpn.setLeft(leftExpr);
        arithExpn.setRight(rightExpr);
        arithExpn.setOpSymbol("TIMES");
        RESULT = arithExpn;
      :}

		|	term:leftExpr DIVIDE factor:rightExpr
      {:
        //System.out.println("term ::= term DIVIDE factor");
        ArithExpn arithExpn = new ArithExpn();
        arithExpn.setLeft(leftExpr);
        arithExpn.setRight(rightExpr);
        arithExpn.setOpSymbol("DIVIDE");
        RESULT = arithExpn;
      :}
		;

factor		::=	primary:prim				// unary minus
      {:
        //System.out.println("factor ::= primary");
        RESULT = prim;
      :}

		|	MINUS factor:fact
      {:
        //System.out.println("factor ::= MINUS factor");
        UnaryMinusExpn unaryMinusExpn = new UnaryMinusExpn();
        unaryMinusExpn.setOperand(fact);
        unaryMinusExpn.setOpSymbol("MINUS");
        RESULT = unaryMinusExpn;
      :}
		;

primary		::=	constant:constnt				// integer or boolean constant
      {:
        //System.out.println("primary ::= constant");
        RESULT = constnt;
      :}

		|	variable:var				// scalar, array element
      {:
        //System.out.println("primary ::= variable");
        RESULT = var;
      :}

		|	IDENT:name L_PAREN argumentList:args R_PAREN 	// function call
      {:
        //System.out.println("primary ::= IDENT (argumentList)");
        FunctionCallExpn funcCallExpr = new FunctionCallExpn();
        funcCallExpr.setArguments(args);
        funcCallExpr.setIdent(name);
        RESULT = funcCallExpr;
      :}

/*
 * Parenthesis is implemented in ast as a unary expression where the operand is the expression
 * and the operand is paren. TODO maybe make subclass of UnaryExpn for this?
 */
		| 	L_PAREN  expression:expr  R_PAREN		// parenthesized expression
      {:
        //System.out.println("primary ::= (expression)");
        UnaryExpn parenExpn = new UnaryExpn();
        parenExpn.setOperand(expr);
        parenExpn.setOpSymbol("PAREN");
        RESULT = parenExpn;
      :}
		;

constant	::=	INTCONST:intConst	// integer constant
      {:
        //System.out.println("constant ::= INTCONST");
        IntConstExpn intConstExpn = new IntConstExpn();
        intConstExpn.setValue(intConst);
        RESULT = intConstExpn;
      :}

		|	TRUE		// constant true
      {:
        //System.out.println("constant ::= TRUE");
        BoolConstExpn boolConstExpn = new BoolConstExpn();
        boolConstExpn.setValue(true);
        RESULT = boolConstExpn;
      :}

		|	FALSE		// constant false
      {:
        //System.out.println("constant ::= FALSE");
        BoolConstExpn boolConstExpn = new BoolConstExpn();
        boolConstExpn.setValue(false);
        RESULT = boolConstExpn;
      :}
		;

variable	::=	IDENT:name					// scalar variable
      {:
        //System.out.println("variable ::= IDENT");
        IdentExpn identExpr = new IdentExpn();
        identExpr.setIdent(name);
        RESULT = identExpr;
      :}

		|	IDENT:name L_SQUARE expression:expr R_SQUARE	// element of an array
      {:
        //System.out.println("variable ::= IDENT [ expression ]");
        SubsExpn subsExpn = new SubsExpn();
        subsExpn.setVariable(name);
        subsExpn.setOperand(expr);
        RESULT = subsExpn;
      :}
		;
